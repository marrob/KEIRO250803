#!/bin/bash


# --- Service Test ---
# systemctl list-units --type=service --state=running
# systemctl status MRPI250610.service 
# pstree | grep mydaemon


# --- Stop & Disable & Remove service ----
# Lelltija:                      systemctl stop MRPI250610.service
# Kvetekzo bootkor nem indul el: systemctl disable MRPI250610.service
# rm /etc/systemd/system/MRPI250610.service
# rm /usr/local/bin/MRPI250610


# --- syslog ---
# 
# journalctl: syslog megjelen√≠t√©se
#
# -f: real-time 
# -u: filter 
# journalctl -u MRPI250610 -f
# journalctl -f | grep "MRPI250610"

echo "Service Install Started..."

# Bin√°ris f√°jl neve (ne legyen el√©r√©si √∫t!)
BINARY_NAME="MRPI250610"
BINARY_SOURCE="./$BINARY_NAME"
BINARY_TARGET="/usr/local/bin/$BINARY_NAME"
SERVICE_FILE="/etc/systemd/system/$BINARY_NAME.service"

# Ellen≈ërizz√ºk, hogy l√©tezik-e a bin√°ris f√°jl
if [[ ! -f "$BINARY_SOURCE" ]]; then
    echo "‚ùå Hiba: A $BINARY_SOURCE nem tal√°lhat√≥."
    exit 1
fi

# M√°sol√°s a rendszer bin√°ris k√∂nyvt√°r√°ba
echo "üìÅ Bin√°ris m√°sol√°sa: $BINARY_SOURCE -> $BINARY_TARGET"
sudo cp "$BINARY_SOURCE" "$BINARY_TARGET"
sudo chmod +x "$BINARY_TARGET"

# --- Jogostult√°sok---
# User=nobody
# Group=nogroup

# --- El√©rhet≈ë UART ---
# dmesg | grep tty
# Ez megmutatja, hogy mely soros eszk√∂z√∂k jelentek meg, pl: ttyUSB0

# --- UART jogosults√°g haszn√°lata ---
# csak az a user hasnz√°lhatja az UART-ot aki a dialout csoport tagja
# igy ellen≈ër√≠zehted: getent group dialout
# igy adahatod hozz√°: sudo usermod -a -G dialout marrob
# sudo gpasswd -d marrob dialout
if [ -z "$1" ]; then
    echo "Haszn√°lat: sudo $0 <felhaszn√°l√≥n√©v>"
    exit 1
fi

CURRENT_USER="$1"

# Hozz√°ad√°s a 'dialout' csoporthoz
echo "Adding user '$CURRENT_USER' to 'dialout' group..."
sudo usermod -a -G dialout "$CURRENT_USER"


# --- Systemd service f√°jl l√©trehoz√°sa ---
# Ez a probl√©ma j√≥l mutatja, mennyire fontos a systemd megfelel≈ë konfigur√°l√°sa, amikor egy h√°tt√©rfolyamatot (d√©mont) kezel√ºnk:
# D√©moniz√°l√°s C-ben: A fork() √©s setsid() h√≠v√°sokkal a programod lev√°lik a termin√°lr√≥l, √©s h√°tt√©rben fut.
# systemd √©s a processzt√≠pusok: A systemd-nek tudnia kell, hogyan viselkedik az ExecStart parancs √°ltal ind√≠tott folyamat.
#    Type=simple (alap√©rtelmezett): A systemd felt√©telezi, hogy a folyamat a ExecStart ind√≠t√°sa ut√°n azonnal fut √©s k√©szen √°ll.
#    Type=forking (amit most haszn√°lsz): A systemd megv√°rja, am√≠g az ExecStart parancs √°ltal elind√≠tott folyamat fork()-ol, a 
#    sz√ºl≈ëfolyamat kil√©p, √©s a gyermekfolyamat marad futni. Ez a helyes t√≠pus a legt√∂bb C-ben √≠rt, klasszikusan d√©moniz√°lt programhoz.

echo "‚öôÔ∏è Systemd service f√°jl l√©trehoz√°sa: $SERVICE_FILE"
sudo bash -c "cat > $SERVICE_FILE" <<EOF
[Unit]
Description=$BINARY_TARGET service for proper shutdown...
After=network.target

[Service]
Type=forking
ExecStart=$BINARY_TARGET
Restart=always
User=$CURRENT_USER
Group=dialout 

[Install]
WantedBy=multi-user.target
EOF

# Systemd √∫jrat√∂lt√©se √©s szolg√°ltat√°s enged√©lyez√©se
echo "üîÑ Systemd √∫jrat√∂lt√©se..."
sudo systemctl daemon-reload

echo "‚úÖ Szolg√°ltat√°s enged√©lyez√©se boot-kor..."
sudo systemctl enable "$BINARY_NAME.service"

echo "üöÄ Szolg√°ltat√°s ind√≠t√°sa..."
sudo systemctl start "$BINARY_NAME.service"

# Ellen≈ërz√©s
echo "üìã St√°tusz:"
sudo systemctl status "$BINARY_NAME.service" --no-pager